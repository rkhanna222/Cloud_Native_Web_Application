AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template
Parameters:
  SNSName:
    Default: verify_user
    Type: String
  S3CodeDeployBucket:
    Description: S3 bucket name where lambda code deploy artifacts are stored
    Type: String
    Default: rk.csye6225.com
  domain:
    Description: domain for  for SES
    Type: String
    Default: prod.raghavkhanna.me
  fromemail:
    Description: from address  for SES
    Type: String
    Default: info@prod.raghavkhanna.me

Resources:
  myLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: myLambda
      Handler: EmailEvent::handleRequest
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket:
          Ref: S3CodeDeployBucket
        S3Key: aws-lambda-0.0.1.zip
      Description: lambda function for verify user
      Environment:
        Variables:
          domain:
            Ref: domain
          fromemail:
            Ref: fromemail
          ttl: '2'
      Runtime: java8
      Timeout: 300
      MemorySize: 512
  mySNSTopic:
    Type: AWS::SNS::Topic
    DependsOn: myLambda
    Properties:
      TopicName:
        Ref: SNSName
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - myLambda
              - Arn
          Protocol: lambda
      DisplayName: Verify User
  snsIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: snsIAMRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: snsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - SNS:Publish
                  - SNS:DeleteTopic
                  - SNS:ListSubscriptionsByTopic
                  - SNS:GetTopicAttributes
                  - SNS:Receive
                  - SNS:AddPermission
                  - SNS:Subscribe
                Effect: Allow
                Resource:
                  - Ref: mySNSTopic
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: mySNSTopic
      FunctionName:
        Fn::GetAtt:
          - myLambda
          - Arn
  LambdaFunctionPolicy:
    DependsOn:
      - LambdaExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":table/csye6225"
          - Effect: Allow
            Action:
              - SES:SendEmail
              - SES:SendRawEmail
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:ses:'
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":identity/"
                    - Ref: domain
      PolicyName: LambdaFunctionPolicy
      Roles:
        - Ref: LambdaExecutionRole
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      RoleName: LambdaExecutionRole
  topicPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: mySNSTopic
    Properties:
      ManagedPolicyName: EC2TopicAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEC2ToPublishToSNSTopic
            Effect: Allow
            Action:
              - SNS:Publish
              - SNS:Subscribe
              - sns:CreateTopic
            Resource:
              Ref: mySNSTopic
      Roles:
        - Fn::ImportValue:
            Fn::Sub: "WebAppS3"
Outputs:
  mySNSTopicArn:
    Description: SNS Arn
    Value:
      Ref: mySNSTopic
    Export:
      Name: SNSARN