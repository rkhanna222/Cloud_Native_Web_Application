
Description: Webapp Infrastructure
Parameters:
  NetworkStackName:
    Description: Web-Application Network Stack Name
    Type: String

  AmiID:
    Description: "AMI ID"
    Type: String
    Default: ""

  S3BucketName:
    Description: "Name of the Bucket"
    Type: String
    Default: "rk.csye6225.com"

  HostedZoneResource:
    Description: "Enter the Zone Resource name"
    Type: String
    Default: "prod.raghavkhanna.me."
  
  SSLCertificateId:
    Type: String
    Default: "9c9d7d04-735f-43f4-a65e-2da25a6ba272"
    Description: "SSL Certificate Id"

Resources:
  s3BucketId:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      # BucketName: !Join ["-", [!Join ["-", [!Ref S3BucketName, !Select [4, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]]]]], !Ref AWS::Region]]
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-S3-Bucket"

  WebAppS3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: EC2-CSYE6225
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetObject
                 - s3:PutObject
                 - s3:DeleteObject
                 - s3:DeleteBucket
                 - s3:ListBucket
                Resource:
                  - !Join ["", ["arn:aws:s3:::", !Ref s3BucketId]]
                  - !Join ["", ["arn:aws:s3:::", !Ref s3BucketId, "/*"]]

        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'ec2:DescribeTags'
                  - 'cloudwatch:PutMetricData'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeVolumes'
                  - 'logs:DescribeLogGroups'
                Resource: "*"
              - Effect: Allow
                Action: 
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                Resource: "arn:aws:ssm:::parameter/AmazonCloudWatch-*"
        - PolicyName: Ec2DbAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:dynamodb:'
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":table/csye6225"

      Tags:
      - Key: Name
        Value:
          Fn::Sub: "EC2-CSYE6225-ID"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: csye6225-LoadBalancerSecuritygroup
      GroupDescription: Security Group for web server load balancer
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-myVPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
                

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: instance-ec2-profile
      Path: /
      Roles:
        - !Ref WebAppS3


  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-myVPC"
      GroupDescription: Security group for web server
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId:
          Fn::GetAtt:
          - LoadBalancerSecurityGroup
          - GroupId

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: csye6225-DatabaseSecurityGroup
      GroupDescription: Enable TCP access via port 3306
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-myVPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId:
          Fn::GetAtt:
          - WebServerSecurityGroup
          - GroupId

  MYSqlDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: SQL custom param group
      Family: mysql8.0

  dbSubnetGroupId:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Data Base Group Name to be assigned to '
      DBSubnetGroupName: DBsubnetGroup
      SubnetIds:
        - Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-PrivateSubnet1"
        - Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-PrivateSubnet2"

  EBSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for EBS
      KeyPolicy:
        Version: "2012-10-17"
        Id: "kms-key-for-ebs"      
        Statement:
          - Sid: "Allow IAM User permission for EBS"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - "kms:*"
            Resource: "*"  

  RdsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for RDS
      KeyPolicy:
        Version: "2012-10-17"
        Id: "kms-key-for-rds"      
        Statement:
          - Sid: "Allow IAM User permission for RDS Instance"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: "kms:*"
            Resource: "*"

  rdsInstanceId:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - dbSubnetGroupId
      - RdsKmsKey
      - DatabaseSecurityGroup
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '20'
      Engine: mysql
      EngineVersion: 8.0.30
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225-rk222
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      DBSubnetGroupName:
        Ref: dbSubnetGroupId
      VPCSecurityGroups:
      - Ref: DatabaseSecurityGroup
      DBParameterGroupName: !Ref MYSqlDBParameterGroup
      PubliclyAccessible: false
      DBName: csye6225
      Port: '3306'
      StorageEncrypted: true
      KmsKeyId: !Ref RdsKmsKey

  loadBalancerId:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EC2LoadBalancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet1"
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet2"
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet3"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-EC2LoadBalancer"

  loadBalancerTargetGroupId:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EC2TargetGroup
      TargetType: instance
      Port: 8080
      Protocol: HTTP
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      IpAddressType: ipv4
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-LoadBalancerTargetGroup"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-myVPC"
  
  loadBalancerListenerId:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: loadBalancerTargetGroupId
      LoadBalancerArn:
        Ref: loadBalancerId
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Join [ "", [ "arn:aws:acm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":certificate/", !Ref SSLCertificateId ]]

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - loadBalancerId
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: DNS name for my instance
      Name: !Ref HostedZoneResource
      Type: A
      AliasTarget:
        DNSName: !GetAtt loadBalancerId.DNSName
        HostedZoneId: !GetAtt loadBalancerId.CanonicalHostedZoneID

  launchConfigurationId:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - EBSKmsKey
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        IamInstanceProfile: 
          Name: !Ref RootInstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - Ref: WebServerSecurityGroup
            DeleteOnTermination: true
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            Encrypted: true
            DeleteOnTermination: true
            KmsKeyId: !Ref EBSKmsKey
        ImageId: 
          Ref: AmiID
        InstanceType: t2.micro
        KeyName: aws
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo touch /home/ubuntu/application.properties
            sudo chmod 764 /home/ubuntu/application.properties
            sudo echo spring.jackson.serialization.fail-on-empty-beans=false >> /home/ubuntu/application.properties
            sudo echo server.port=8080 >> /home/ubuntu/application.properties
            sudo echo cloud.aws.region.static=${AWS::Region} >> /home/ubuntu/application.properties
            sudo echo cloud.aws.stack.auto=false >> /home/ubuntu/application.properties
            sudo echo cloud.aws.profile=${RootInstanceProfile} >> /home/ubuntu/application.properties
            sudo echo spring.session.jdbc.initialize-schema=always  >> /home/ubuntu/application.properties
            sudo echo bucket.name=${s3BucketId} >> /home/ubuntu/application.properties
            sudo echo spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver >> /home/ubuntu/application.properties
            sudo echo spring.datasource.url=jdbc:mysql:\/\/${rdsInstanceId.Endpoint.Address}:3306\/csye6225  >> /home/ubuntu/application.properties
            sudo echo spring.datasource.username=csye6225master >> /home/ubuntu/application.properties
            sudo echo spring.datasource.password=csye6225password >> /home/ubuntu/application.properties
            sudo echo spring.jpa.database=MYSQL >> /home/ubuntu/application.properties
            sudo echo spring.jpa.hibernate.ddl-auto=update >> /home/ubuntu/application.properties
            sudo echo spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect >> /home/ubuntu/application.properties
            sudo echo logging.file.name=csye6225.log >> /home/ubuntu/application.properties
            sudo echo logging.file.path=/home/ubuntu >> /home/ubuntu/application.properties
            sudo echo logging.level.com.cloud.rest.webservices.webapp.*=INFO >> /home/ubuntu/application.properties
            sudo echo publish.metrics=true >> /home/ubuntu/application.properties
            sudo echo metrics.server.hostname=localhost >> /home/ubuntu/application.properties
            sudo echo metrics.server.port=8125 >> /home/ubuntu/application.properties
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/home/ubuntu/cloudwatch-config.json \
            -s
            java -jar /home/ubuntu/webapp-0.0.1-SNAPSHOT.jar --spring.config.location=file:////home/ubuntu/application.properties &


  autoScalingGroupId:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerGroup
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 250
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref launchConfigurationId
        Version: !GetAtt launchConfigurationId.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      # NewInstancesProtectedFromScaleIn: true
      TargetGroupARNs:
      - Ref: loadBalancerTargetGroupId
      VPCZoneIdentifier:
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet1"
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet2"
      - Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-mySubnet3"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-AutoScalingGroup"
        PropagateAtLaunch: true
      - Key: Application Role
        Value: Web Server
        PropagateAtLaunch: true

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: autoScalingGroupId
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: autoScalingGroupId
      ScalingAdjustment: "-1"

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 5% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '5.0'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: autoScalingGroupId
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 1% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '3.0'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: autoScalingGroupId
      ComparisonOperator: LessThanThreshold
  
  dynamoDBId:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: csye6225
      AttributeDefinitions:
      - AttributeName: emailId
        AttributeType: S
      KeySchema:
      - AttributeName: emailId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TimeToLiveSpecification:
        AttributeName: ttl_timestamp
        Enabled: true

Outputs:
    dynamoDBTable:
      Description: DynamoDB Table Name
      Value:
        Ref: dynamoDBId
      Export:
        Name:
          Fn::Sub: "${AWS::StackName}-dynamoDBTable"
    dynamoDBArn:
      Description: DynamoDB Table Arn
      Value:
        Fn::GetAtt:
        - dynamoDBId
        - Arn
      Export:
        Name:
          Fn::Sub: "${AWS::StackName}-dynamoDBArn"
    WebAppS3:
      Description: EC2 Execution Role logical Id
      Value:
        Ref: WebAppS3
      Export:
        Name:
          Fn::Sub: "WebAppS3"
    s3BucketId:
      Description: Exporting S3 Bucket
      Value: !Ref s3BucketId
      Export: 
        Name: !Sub "s3BucketId"

    rdsInstanceId:
      Description: Exporting RDSDB instance 
      Value: !Ref rdsInstanceId
      Export: 
        Name: !Sub "rdsInstanceId"

    launchConfigurationId:
      Description: Exporting Launch Template Id 
      Value: !Ref launchConfigurationId
      Export: 
        Name: !Sub "launchConfigurationId"

    WebServerSecurityGroup:
      Description: Security group for Web Server 
      Value: !Ref WebServerSecurityGroup
      Export: 
        Name: !Sub "WebServerSecurityGroup"

    RootInstanceProfile:
      Description: Root Instance Profile 
      Value: !Ref RootInstanceProfile
      Export: 
        Name: !Sub "RootInstanceProfile"

    RDSDBEndpointAddress:
      Description: Exporting RDSDB Endpoint Address 
      Value: !GetAtt rdsInstanceId.Endpoint.Address
      Export: 
        Name: !Sub "RDSDBEndpointAddress"