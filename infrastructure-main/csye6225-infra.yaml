
Description: Webapp Infrastructure
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "190.160.0.0/16"
  
  Subnet1CIDR:
    Description: "CIDR block for Subnet 1"
    Type: String
    Default: "190.160.1.0/24"

  Subnet2CIDR:
    Description: "CIDR block for Subnet 2"
    Type: String
    Default: "190.160.2.0/24"

  Subnet3CIDR:
    Description: "CIDR block for Subnet 3"
    Type: String
    Default: "190.160.3.0/24"

  PrivateSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: "190.160.20.0/24"

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: "190.160.21.0/24"

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: "190.160.22.0/24"

  PublicRouteCIDR:
    Description: "CIDR block for Public Route"
    Type: String
    Default: "0.0.0.0/0"
  Zone1:
    Description: "Zone Selection"
    Type: Number
    Default: 0
  Zone2:
    Description: "Zone Selection"
    Type: Number
    Default: 1
  Zone3:
    Description: "Zone Selection"
    Type: Number
    Default: 2
  AmiID:
    Description: "AMI ID"
    Type: String
    Default: ""

  S3BucketName:
    Description: "Name of the Bucket"
    Type: String
    Default: "rk.csye6225.com"

  HostedZoneResource:
    Description: "Enter the Zone Resource name"
    Type: String
    Default: "prod.raghavkhanna.me."

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ !Ref Zone1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ !Ref Zone2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ !Ref Zone3, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref myVPC
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub Public Routes Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: !Ref PublicRouteCIDR
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref mySubnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref mySubnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref mySubnet3

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref myVPC
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName

  # DefaultPrivateRoute1:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable1
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3

  s3BucketId:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      # BucketName: !Join ["-", [!Join ["-", [!Ref S3BucketName, !Select [4, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]]]]], !Ref AWS::Region]]
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-S3-Bucket"

  WebAppS3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: EC2-CSYE6225
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetObject
                 - s3:PutObject
                 - s3:DeleteObject
                 - s3:DeleteBucket
                 - s3:ListBucket
                Resource:
                  - !Join ["", ["arn:aws:s3:::", !Ref s3BucketId]]
                  - !Join ["", ["arn:aws:s3:::", !Ref s3BucketId, "/*"]]

        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'ec2:DescribeTags'
                  - 'cloudwatch:PutMetricData'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeVolumes'
                  - 'logs:DescribeLogGroups'
                Resource: "*"
              - Effect: Allow
                Action: 
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                Resource: "arn:aws:ssm:::parameter/AmazonCloudWatch-*"
        - PolicyName: Ec2DbAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:dynamodb:'
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":table/csye6225"

      Tags:
      - Key: Name
        Value:
          Fn::Sub: "EC2-CSYE6225-ID"
                

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: instance-ec2-profile
      Path: /
      Roles:
        - !Ref WebAppS3


  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: myVPC
      GroupDescription: Security group for web server
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: csye6225-DatabaseSecurityGroup
      GroupDescription: Enable TCP access via port 3306
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId:
          Fn::GetAtt:
          - WebServerSecurityGroup
          - GroupId

  MYSqlDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: SQL custom param group
      Family: mysql8.0

  dbSubnetGroupId:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Data Base Group Name to be assigned to '
      DBSubnetGroupName: DBsubnetGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  rdsInstanceId:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '20'
      Engine: mysql
      EngineVersion: 8.0.30
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225-rk222
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      DBSubnetGroupName:
        Ref: dbSubnetGroupId
      VPCSecurityGroups:
      - Ref: DatabaseSecurityGroup
      DBParameterGroupName: !Ref MYSqlDBParameterGroup
      PubliclyAccessible: false
      DBName: csye6225
      Port: '3306'

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: DNS name for my instance
      Name: !Ref HostedZoneResource
      Type: A
      TTL: 900
      ResourceRecords:
      - !GetAtt EC2Instance.PublicIp

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiID
      IamInstanceProfile: !Ref RootInstanceProfile
      InstanceType: t2.micro
      KeyName: aws
      SubnetId: !Ref mySubnet1
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 50
            VolumeType: "gp2"
            DeleteOnTermination: "true"
      Tags:
       - Key: Name
         Value: My Webapp Server     
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo touch /home/ubuntu/application.properties
          sudo chmod 764 /home/ubuntu/application.properties
          sudo echo spring.jackson.serialization.fail-on-empty-beans=false >> /home/ubuntu/application.properties
          sudo echo server.port=8080 >> /home/ubuntu/application.properties
          sudo echo cloud.aws.region.static=${AWS::Region} >> /home/ubuntu/application.properties
          sudo echo cloud.aws.stack.auto=false >> /home/ubuntu/application.properties
          sudo echo cloud.aws.profile=${RootInstanceProfile} >> /home/ubuntu/application.properties
          sudo echo spring.session.jdbc.initialize-schema=always  >> /home/ubuntu/application.properties
          sudo echo bucket.name=${s3BucketId} >> /home/ubuntu/application.properties
          sudo echo spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver >> /home/ubuntu/application.properties
          sudo echo spring.datasource.url=jdbc:mysql:\/\/${rdsInstanceId.Endpoint.Address}:3306\/csye6225  >> /home/ubuntu/application.properties
          sudo echo spring.datasource.username=csye6225master >> /home/ubuntu/application.properties
          sudo echo spring.datasource.password=csye6225password >> /home/ubuntu/application.properties
          sudo echo spring.jpa.database=MYSQL >> /home/ubuntu/application.properties
          sudo echo spring.jpa.hibernate.ddl-auto=update >> /home/ubuntu/application.properties
          sudo echo spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect >> /home/ubuntu/application.properties
          sudo echo logging.file.name=csye6225.log >> /home/ubuntu/application.properties
          sudo echo logging.file.path=/home/ubuntu >> /home/ubuntu/application.properties
          sudo echo logging.level.com.cloud.rest.webservices.webapp.*=INFO >> /home/ubuntu/application.properties
          sudo echo publish.metrics=true >> /home/ubuntu/application.properties
          sudo echo metrics.server.hostname=localhost >> /home/ubuntu/application.properties
          sudo echo metrics.server.port=8125 >> /home/ubuntu/application.properties
          sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/home/ubuntu/cloudwatch-config.json \
          -s
          java -jar /home/ubuntu/webapp-0.0.1-SNAPSHOT.jar --spring.config.location=file:////home/ubuntu/application.properties &
  
  dynamoDBId:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: csye6225
      AttributeDefinitions:
      - AttributeName: emailId
        AttributeType: S
      KeySchema:
      - AttributeName: emailId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TimeToLiveSpecification:
        AttributeName: ttl_timestamp
        Enabled: true

Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC 
    Subnets:
      Description: A list of the subnets
      Value: !Join [ ",", [ !Ref mySubnet1, !Ref mySubnet2, !Ref mySubnet3 ]]
    Zones:
      Description: A list of the Zones
      Value: !Join [ ",", [ !Ref Zone1, !Ref Zone2, !Ref Zone3 ]]
    dynamoDBTable:
      Description: DynamoDB Table Name
      Value:
        Ref: dynamoDBId
      Export:
        Name:
          Fn::Sub: "${AWS::StackName}-dynamoDBTable"
    dynamoDBArn:
      Description: DynamoDB Table Arn
      Value:
        Fn::GetAtt:
        - dynamoDBId
        - Arn
      Export:
        Name:
          Fn::Sub: "${AWS::StackName}-dynamoDBArn"
    WebAppS3:
      Description: EC2 Execution Role logical Id
      Value:
        Ref: WebAppS3
      Export:
        Name:
          Fn::Sub: "WebAppS3"